(require-extension lalr-driver)
(define lambda-parser
  (lr-driver
    '#(((*default* *error*) (NUMBER 4) (LAMBDA 3) (LPAREN 2) (VAR 1))
       ((*default* -4))
       ((*default* *error*) (NUMBER 4) (LAMBDA 3) (LPAREN 2) (VAR 1))
       ((*default* *error*) (VAR 8))
       ((*default* -5))
       ((*default* -3))
       ((*default* *error*)
        (*eoi* 13)
        (NUMBER 4)
        (LAMBDA 3)
        (LPAREN 2)
        (VAR 1)
        (+ 12)
        (- 11)
        (* 10)
        (/ 9))
       ((*default* *error*)
        (NUMBER 4)
        (LAMBDA 3)
        (LPAREN 2)
        (RPAREN 16)
        (VAR 1)
        (+ 12)
        (- 11)
        (* 10)
        (/ 9))
       ((*default* *error*) (DOT 17))
       ((*default* *error*) (NUMBER 4) (LAMBDA 3) (LPAREN 2) (VAR 1))
       ((*default* *error*) (NUMBER 4) (LAMBDA 3) (LPAREN 2) (VAR 1))
       ((*default* *error*) (NUMBER 4) (LAMBDA 3) (LPAREN 2) (VAR 1))
       ((*default* *error*) (NUMBER 4) (LAMBDA 3) (LPAREN 2) (VAR 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -2))
       ((*default* *error*)
        (NUMBER 4)
        (LAMBDA 3)
        (LPAREN 2)
        (VAR 1)
        (+ 12)
        (- 11)
        (* 10)
        (/ 9))
       ((*default* -11))
       ((*default* *error*) (NUMBER 4) (LAMBDA 3) (LPAREN 2) (VAR 1))
       ((*default* -10)
        (NUMBER 4)
        (LAMBDA 3)
        (LPAREN 2)
        (VAR 1)
        (+ 12)
        (- 11)
        (* 10)
        (/ 9))
       ((*default* -9)
        (NUMBER 4)
        (LAMBDA 3)
        (LPAREN 2)
        (VAR 1)
        (+ 12)
        (- 11)
        (* 10)
        (/ 9))
       ((*default* -8)
        (NUMBER 4)
        (LAMBDA 3)
        (LPAREN 2)
        (VAR 1)
        (+ 12)
        (- 11)
        (* 10)
        (/ 9))
       ((*default* -7)
        (NUMBER 4)
        (LAMBDA 3)
        (LPAREN 2)
        (VAR 1)
        (+ 12)
        (- 11)
        (* 10)
        (/ 9))
       ((*default* -6)
        (NUMBER 4)
        (LAMBDA 3)
        (LPAREN 2)
        (VAR 1)
        (+ 12)
        (- 11)
        (* 10)
        (/ 9)))
    (vector
      '((2 . 5) (1 . 6))
      '()
      '((2 . 5) (1 . 7))
      '()
      '()
      '()
      '((2 . 14) (1 . 15))
      '((2 . 14) (1 . 15))
      '()
      '((2 . 5) (1 . 18))
      '((2 . 5) (1 . 19))
      '((2 . 5) (1 . 20))
      '((2 . 5) (1 . 21))
      '()
      '()
      '((2 . 14) (1 . 15))
      '()
      '((2 . 5) (1 . 22))
      '((2 . 14) (1 . 15))
      '((2 . 14) (1 . 15))
      '((2 . 14) (1 . 15))
      '((2 . 14) (1 . 15))
      '((2 . 14) (1 . 15)))
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 1 (list 'APPLY $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 1 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 2 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 2 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 2 (list 'LAMBDA (list $2) $4))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 2 `(+ ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 2 `(- ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 2 `(* ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 2 `(/ ,$1 ,$3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 2 $2))))))

